"THREE SUM"
code:
class Solution {
public:
    vector<vector<int>>threeSum(vector<int>& nums) {
        
        vector<vector<int>>ans;
       sort(nums.begin(),nums.end());
        int n=nums.size();
        
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j=i+1;
            int k=n-1;
            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0){
                    k--;
                }
                else{
                    vector<int>v{nums[i],nums[j],nums[k]};
                    ans.push_back(v);
                    j++;
                    k--;
                    
                    while(j<k && nums[j]==nums[j-1]){j++;}
                    while(j<k && nums[k]==nums[k+1]){k--;}
                }
                
            }
        }
       
        return ans;
    }
};


"RAT IN A MAZE"
code:
//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
    vector<string>v;
    void dfs(int x,int y,string s,int n,int m,vector<vector<int>> &mat,vector<vector<int>> &visited){
        
        if(x<0 || x>=n ||y<0 ||y>=m){return;}
        if(mat[x][y]==0 || visited[x][y]==1){return;}
        if(x==n-1 && y==m-1){v.push_back(s);
            return;
        }
        
     visited[x][y]=1;
     
     dfs(x-1,y,s+'U',n,m,mat,visited);
      dfs(x+1,y,s+'D',n,m,mat,visited);
       dfs(x,y-1,s+'L',n,m,mat,visited);
       dfs(x,y+1,s+'R',n,m,mat,visited);

        visited[x][y]=0;
    }
    
    
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        int n=mat.size();
        int m=mat[0].size();
        
        
      
        vector<vector<int>>visited(n,vector<int>(m,0));
        
       if(mat[0][0]==0 || mat[n-1][m-1]==0){
           return v;
       }
       
       
       
       string s="";
       dfs(0,0,s,n,m,mat,visited);
       
       sort(v.begin(),v.end());
       return v;
       
    }
};


DELETE NTH FROM LAST OF LINKED LIST
code:
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode*dummy=new ListNode(0);
        dummy->next=head;
        
        
        ListNode*slow=dummy;
        ListNode*fast=dummy;
        
        for(int i=0;i<=n;i++){
            if(fast==NULL){return head;}
            fast=fast->next;
        }
        
        while(fast!=NULL){
            slow=slow->next;
            fast=fast->next;
        }
        
        slow->next=slow->next->next;
        
        
        return dummy->next;
        
    }
};

