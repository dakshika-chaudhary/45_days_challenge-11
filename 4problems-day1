287. Find the Duplicate Number

code:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
      unordered_set<int>s;
        int ans;
        s.insert(nums[0]);
       for(int i=1;i<nums.size();i++){
         if(s.find(nums[i])!=s.end()){
            return nums[i];
         } 
           else{
             s.insert(nums[i]);  
           }
       }
       return -1;   
    }
};

75. Sort Colors
code:
class Solution {
public:
    void sortColors(vector<int>& nums) {
       unordered_map<int,int>mp;
        int V=nums.size();
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        
    int index=0;
        for(int first=0;first<=2;first++){
           while (mp[first] > 0) {
                nums[index] = first;
              mp[first]--;
               index++;
            }
        }
        return;
    }
};

26. Remove Duplicates from Sorted Array
code:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
      int count=0;
        for(int i=1;i<nums.size();i++){
            if(nums[count]!=nums[i]){
                count++;
                nums[count]=nums[i];
            }
        }
           
        
       return count+1; 
    }
};

88. Merge Sorted Array
code:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=0;
        int j=0;
        int k=0;
        vector<int>nums(nums1.size(),0);
        while(i<m && j<n){
            if(nums1[i]<nums2[j]){
                nums[k]=nums1[i];
                i++;
                
            }
            else{
                nums[k]=nums2[j];
                j++;
            }
            k++;
        }
        
        while(i<m){
            nums[k]=nums1[i];
            i++;
            k++;
        }
          while(j<n){
            nums[k]=nums2[j];
            j++;
            k++;
        }
       nums1=nums;
    }
};
