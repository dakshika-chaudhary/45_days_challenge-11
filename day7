

TopologicalSort
code:
class Solution
{
    private:
    void dfs(int node,vector<int> adj[], vector<int> &vis,,stack<int>&st){
     vis[node]=1;
     
     for(auto &x:adj[node]){
         if(!vis[x]){dfs(x,adj,vis,st);}
     }
     st.push(node);
    
    }
	public:

	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   
	 vector<int>vis(V,0);
	   stack<int>st;
	   
	   for(int i=0;i<V;i++){
	       if(!vis[i]){
	           dfs(i,adj,vis,st);
	       }
	   }
	   
	   vector<int>v;
	   while(!st.empty()){
	      v.push(st.top());
	      st.pop();
	   }
	   
	   return v;
	}
};

MAJORITY ELEMENTS
code:
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        
        int ans=0;
        int maxim=INT_MIN;
        for(auto &x:mp){
          if(x.second>maxim){ans=x.first;
                            maxim=x.second;}
        }
        
        return ans;
    }
};

SAME TREE
code:
class Solution {
public:
    bool same(TreeNode*p,TreeNode*q){
        if(p==NULL && q==NULL){return true;}
        if((p==NULL && q!=NULL)||(p!=NULL && q==NULL)){return false;}
        if(p->val!=q->val){return false;}
        same(p->left,q->left);
        same(p->right,q->right);
        return same(p->left,q->left)&&same(p->right,q->right);
        
    }
    
    bool isSameTree(TreeNode* p, TreeNode* q) {
       
        
        return same(p,q);
    }
};
