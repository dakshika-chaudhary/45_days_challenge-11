NEXT GREATEST ELEMENT FIRST
code:
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
        unordered_map<int,int>mp;
        stack<int>st;
        
        
      for(int nums:nums2){
        while(!st.empty() && st.top()<nums){
            mp[st.top()]=nums;
            st.pop();
        } 
          st.push(nums);
      }
        
        while(!st.empty()){
            mp[st.top()]=-1;
            st.pop();
        }
       
        
        for(int i=0;i<nums1.size();i++){
            
            nums1[i]=mp[nums1[i]];
        }
        
        
        return nums1;
    }
};
<***************************************-------------------------***************************************>

ADD TWO LINKEDLIST NODES
code:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
     ListNode*l3=new ListNode(0);
        ListNode*head=l3;
        int carry=0;
        while(l1 && l2){
            int value=l1->val+l2->val+carry;
            carry=value/10;
            l3->next=new ListNode(value%10);
            l3=l3->next;
            l2=l2->next;
            l1=l1->next;
        }
        while(l1){
            int value=l1->val+carry;
            carry=value/10;
            l3->next=new ListNode(value%10);
            l3=l3->next;
            l1=l1->next;
        }
        while(l2){
            int value=l2->val+carry;
            carry=value/10;
            l3->next=new ListNode(value%10);
            l3=l3->next;
            l2=l2->next;
        }
        
        if(carry){
            l3->next=new ListNode(carry);
        }
        return head->next;

<*********************************_____________________________________*****************************>
REVERSE THE LIST ||
code:

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode*dummy=new ListNode(0);
        dummy->next=head;
        
        ListNode*leftprev=dummy;
        ListNode*curr=head;
        
        for(int i=0;i<left-1;i++){
            curr=curr->next;
            leftprev=leftprev->next;
        }
        ListNode*subhead=curr;
        
          //reverse
            ListNode*prev=NULL;
        ListNode*nextnode=curr;
            for(int i=0;i<=right-left;i++){
                nextnode=curr->next;
                curr->next=prev;
                prev=curr;
                curr=nextnode;
            }
            
            
        leftprev->next=prev;
            subhead->next=curr;
        
        return dummy->next;
        
    }
};
        
        
    }
};



