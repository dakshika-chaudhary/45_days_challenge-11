404. Sum of Left Leaves
code:
class Solution {
public:
int total=0;
    void helper(TreeNode*root){
        if(root==NULL){return;}
        if(root->left!=NULL &&  root->left->left==NULL && root->left->right==NULL){total=total+root->left->val;}
        helper(root->left);
        helper(root->right);
                                                                                   
                                    
    }
    
    
    int sumOfLeftLeaves(TreeNode* root){
      if(root==NULL){return 0;}
        helper(root);
        return total;

    
    }
};

200. Number of Island
code:
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
     int row=grid.size();
     int col=grid[0].size();
      int count=0;
        
        for(int r=0;r<row;r++){
            for(int c=0;c<col;c++){
                if(grid[r][c]=='0'){continue;}
                
                    count++;
                    grid[r][c]='0';
                    queue<pair<int,int>>qu;
                    qu.push({r,c});
                    while(qu.size()!=0){
                        auto curr=qu.front();
                        qu.pop();
                        int currRow=curr.first;
                        int currCol=curr.second;
                        
                      if(currRow-1>=0 && grid[currRow-1][currCol]=='1')            {qu.push({currRow-1,currCol});
                  grid[currRow-1][currCol]='0';                                                                }
                                           
             if(currRow+1<row && grid[currRow+1][currCol]=='1')            {qu.push({currRow+1,currCol});
                  grid[currRow+1][currCol]='0';                                                                }
                                       
             if(currCol-1>=0 && grid[currRow][currCol-1]=='1')            {qu.push({currRow,currCol-1});
                  grid[currRow][currCol-1]='0';                                                                }
                                   
                if(currCol+1<col && grid[currRow][currCol+1]=='1')            {qu.push({currRow,currCol+1});
                  grid[currRow][currCol+1]='0';                                                                }
                    }
                
            }
        }
        
        return count;


      108. Convert Sorted Array to Binary Search Tree
      code:
      class Solution {
public:
    
    TreeNode*helper(vector<int>&nums,int lo,int hi){
        if(lo>hi)return NULL;
        int mid=(hi+lo)/2;
        TreeNode*root=new TreeNode(nums[mid]);
        root->left=helper(nums,lo,mid-1);
        root->right=helper(nums,mid+1,hi);
        
        return root;
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
      int n=nums.size();
       return helper(nums,0,n-1);
        
    }
};

230:kth smallest node in BST
code:
      class Solution {
public:
    void inorder(TreeNode*root,int &k,int &ans,int &a,vector<TreeNode*>v){
        if(root==NULL){return;}
        inorder(root->left,k,ans,a,v);
        v.push_back(root);
        a++;
        if(k==a)
        {ans=root->val;
        return;}
        inorder(root->right,k,ans,a,v);
    }
    
    
    int kthSmallest(TreeNode* root, int k){
       int ans=0;
        int a=0;
        vector<TreeNode*>v;
        inorder(root,k,ans,a,v);
        
        return ans;
    }
};

  733 Flood Fill
    code:
      class Solution {
public:
  void helper(vector<vector<int>>&image,int currRow,int currCol,int precolor,int color){
      int n=image.size();
      int m=image[0].size();
      if(currRow<0 || currCol<0 ||currRow>=n || currRow>=m){return;}
      if(image[currRow][currCol]==precolor){
          image[currRow][currCol]=color;
          helper(image,currRow-1,currCol,precolor,color);
           helper(image,currRow+1,currCol,precolor,color);
           helper(image,currRow,currCol-1,precolor,color);
           helper(image,currRow,currCol+1,precolor,color);
      }
  }
    
    
     vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
         if(image[sr][sc]==color){return image;}
         helper(image,sr,sc,image[sr][sc],color);
         return image;
    }
};


Detect a cycle in an undirected graph
code:
   class Solution {
  public:
   
   bool bfs(int V,vector<int>adj[],int src,int vis[]){
       vis[src]=1;
       queue<pair<int,int>>qu;
       qu.push({src,-1});
       
       while(qu.empty()!=0){
           int node=qu.front().first;
           int parent=qu.front().second;
           
           qu.pop();
           for(auto currnode:adj[node]){
               if(vis[currnode]!='1'){
                   qu.push({currnode,node});
                   vis[currnode]=1;
               }
               else if(parent!=currnode){
                   return true;
               }
             
           }
           
       }
             return false;
       
       
   }

    bool isCycle(int V, vector<int> adj[]) {
        int vis[V]={0};
        for(int i=0;i>V;i++){
         if(vis[i]==0){if(bfs(V,adj[],i,vis)){return true;}
         }
         return false;
        
    }
};

55.Jump Game
code:
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int index=nums.size()-1;
        for(int i=nums.size()-1;i>=0;i--){
            if(nums[i]+i>=index){index=i;}
        }
        if(index==0){return true;}
        return false;
    }
};



