Detect a cycle in a directed graph.
  code:
class Solution {
  public:
    
    bool dfs(int node,vector<int>adj[],int vis[],int pathvis[]){
        vis[node]=1;
        pathvis[node]=1;
        
        for(auto it:adj[node]){
            if(!vis[it]){if(dfs(it,adj,vis,pathvis)==true){return true;}}
            else if(pathvis[it]){return true;}
                
            
        }
        pathvis[node]=0;
        return false;
    }
    
    
    bool isCyclic(int V, vector<int> adj[]) {
     int vis[V]={0};
     int pathvis[V]={0};
     
     for(int i=0;i<V;i++){
         if(!vis[i]){
         if(dfs(i,adj,vis,pathvis)==true){
             return true;
         }
             
       }
     }
    return false; 
        
    }
};

<**********************************************//////////////////////////////////////************************************>

Two Sum
code:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     unordered_map<int,int>mp;
        vector<int>v;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]=i; 
        }
        
        for(int i=0;i<nums.size();i++){
            int f=target-nums[i];
              auto x=mp.find(f);
            if(x!=mp.end() && x->second!=i){v.push_back(i);
                                    v.push_back(x->second);
                                            break;}
            
        }
        
       
        return v;
    }
};
<********************************************/////////////////////////////////*****************************************>

INVERT TREE NODE
code:
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL){return NULL;}
        if(root->left==NULL && root->right==NULL){return root;}
        TreeNode*temp=root->left;
        root->left=root->right;
        root->right=temp;
        
        invertTree(root->left);
        invertTree(root->right);
        
        return root;
    }
};
<*********************************************************////////////////////////////////******************************>
SUBTREE OF ANOTHER TREE
code:
class Solution {
public:
    bool checkequality(TreeNode*root,TreeNode*subRoot){
        if(root==NULL && subRoot==NULL){return true;}
        if(root==NULL && subRoot!=NULL){return false;}
        if(root!=NULL && subRoot==NULL){return false;}
        if(root->val!=subRoot->val!=NULL){return false;}
        bool checkleft=checkequality(root->left,subRoot->left);
       bool checkright= checkequality(root->right,subRoot->right);
        return checkleft&&checkright;
    }
    
  bool isSubtree(TreeNode* root, TreeNode* subRoot) {
      if(root==NULL){return false;}
      if(root->val==subRoot->val){
          bool ans=checkequality(root,subRoot);
          if(ans==true){return true;}
          
      }
      bool left = isSubtree(root->left,subRoot);
      bool right = isSubtree(root->right,subRoot);
          
      return left||right;
    }
};
<*************************************///////////////////////////////////////////*****************************************>
Remove Dublicatew from sorted Linkedlist
code:
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
      
        if(head==NULL || head->next==NULL){return head;}
        
        ListNode*tempa=head;
        ListNode*tempb=head->next;
        
        while(tempb!=NULL){
            if(tempa->val==tempb->val){
            tempa->next=tempb->next;
            delete tempb;
            tempb=tempa->next; 
            }
        
        
        tempa=tempb;
        tempb=tempa->next;
        
        }
        return head;
    }
};


