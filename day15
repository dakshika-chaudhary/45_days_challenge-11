VALID BINARY SEARCH TREE
code:
class Solution {
public:
   void inorder(TreeNode*root,vector<int>&ans){
   if(root==NULL){return;}
   inorder(root->left,ans);
   ans.push_back(root->val);
   inorder(root->right,ans);

   }

    bool isValidBST(TreeNode* root) {
        vector<int>ans;
    inorder(root,ans);

    for(int i=0;i<ans.size()-1;i++){
        if(ans[i]>=ans[i+1]){return false;}

    }
    return true;
    }
};

<*************************************=======================================*************************************>
"MAXIMUM PRODUCT OF THREE"
code:
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n=nums.size();
       
        
           if (n < 3) return 0;
        
       int mans;
        
        sort(nums.begin(), nums.end());
        
        for(int i=2;i<n;i++){
          mans=max(nums[n-1]*nums[n-2]*nums[n-3],nums[0]*nums[1]*nums[n-1]);
                      
           
        }
        return mans;
    }
};
