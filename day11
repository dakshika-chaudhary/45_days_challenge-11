"REORDER LINKEDLIST"
code:
class Solution {
public:
    ListNode* reverse(ListNode*head){
        ListNode*prev=NULL;
        ListNode*curr=head;
        ListNode*nnext=NULL;
        while(curr!=NULL){
            nnext=curr->next;
            curr->next=prev;
            prev=curr;
            curr=nnext;
        }
        return prev;
        
    }
    
    void reorderList(ListNode* head) {
     
        ListNode*slow=head;
        ListNode*fast=head;
        
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        
        ListNode*second=reverse(slow->next);
        slow->next=NULL;
        ListNode*first=head;
        
        
        while(second!=NULL){
            ListNode*temp1=first->next;
            ListNode*temp2=second->next;
            first->next=second;
            second->next=temp1;
            first=temp1;
            second=temp2;
        }
        
        
    }
};

"VALID PARANTHESIS"
code:
class Solution {
public:

    bool helper(char a,char b){
    return ((a=='{'&&b=='}')||(a=='('&&b==')')||(a=='['&&b==']'));
}
    
    bool isValid(string s) {
        
       int n=s.size();
        stack<char>st;
        for(int i=0;i<n;i++){
          if(s[i]=='(' || s[i]=='{' || s[i]=='['){
              st.push(s[i]);
          } 
            
         else{
           if(st.empty()){return false;}
              if(helper(st.top(),s[i])){st.pop();}
                 
             
             else{return false;}
         }
            
    }
        
       if(st.empty()){return true;}
        return false;
        

    }
};

PRINT THE INDEX OF FIRST OCCURENCE
code:
class Solution {
public:
    int strStr(string haystack, string needle) {
        int n=haystack.size();
        int m=needle.size();
        
        if(n<m){return -1;}
        for(int i=0;i<n;i++){
            if(haystack[i]==needle[0]){
                if(haystack.substr(i,m)==needle){return i;}
                
            }
        }
        return -1;
    }
};
